# === Libraries ===
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
from ripser import Rips
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import FunctionTransformer
import matplotlib.pyplot as plt
from persim import plot_diagrams
from plotly.subplots import make_subplots
import plotly.graph_objects as go
from sklearn.decomposition import PCA
from gtda.time_series import SlidingWindow
from gtda.diagrams import PersistenceEntropy, Scaler
from gtda.metaestimators import CollectionTransformer
from gtda.pipeline import Pipeline
from gtda.time_series import SlidingWindow
from gtda.time_series import TakensEmbedding
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, roc_auc_score, recall_score, f1_score, precision_score
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from ripser import Rips
from sklearn.preprocessing import FunctionTransformer
from gtda.homology import VietorisRipsPersistence
import seaborn as sns 

# === Initial configuration ===
st.set_page_config(
    layout="wide",
    page_title="Fruits: a Topological Analysis for Intelica"
)

# === Load Data ===
@st.cache_data
def load_data():
    return pd.read_csv("C:/Users/52452/Downloads/df_fruits.csv")

data = load_data()
data['report_date'] = pd.to_datetime(data['report_date'])

# === Sidebar ===
with st.sidebar:
    st.image("https://raw.githubusercontent.com/SaraRiveraM/TDA-para-Intellica-/main/Images/images.png")
    st.markdown("<h1 style='font-size: 20px;'>Elija la fruta a analizar:</h1>", unsafe_allow_html=True)
    fruta = st.radio("Seleccione una fruta:", ["Zarzamora", "Mora Azul"])

fruta_dict = {
    "Zarzamora": "Blackberries",
    "Mora Azul": "Blueberries"
}

# === Tabs ===
tab1, tab2 = st.tabs([
    f"üß™ An√°lisis exploratorio de los precios de la {fruta}",
    "üß† An√°lisis topol√≥gico (diagramas de persistencia)"
])

# ========================
# === TAB 1 - Exploraci√≥n
# ========================
with tab1:
    st.markdown(f"<h1 style='font-size: 40px;'>üí≤ An√°lisis Topol√≥gico: Relaci√≥n de los Cambios Abruptos de los Precios de la - {fruta} üíπ</h1>", unsafe_allow_html=True)
    st.markdown("---")
    st.subheader("üîç Consulta hist√≥rica de precios")

    data['day'] = data['report_date'].dt.day
    data['month'] = data['report_date'].dt.month
    data['year'] = data['report_date'].dt.year

    st.markdown("### üìÖ Seleccione una fecha:")
    col1, col2, col3 = st.columns(3)

    with col1:
        d√≠as_disponibles = sorted(data['day'].unique())
        d√≠a_seleccionado = st.selectbox("D√≠a", d√≠as_disponibles)

    with col2:
        meses_disponibles = sorted(
            data[data['day'] == d√≠a_seleccionado]['month'].unique()
        )
        mes_seleccionado = st.selectbox(
            "Mes",
            meses_disponibles,
            format_func=lambda x: datetime(1900, x, 1).strftime('%B')
        )

    with col3:
        a√±os_disponibles = sorted(
            data[(data['day'] == d√≠a_seleccionado) & (data['month'] == mes_seleccionado)]['year'].unique(),
            reverse=True
        )
        a√±o_seleccionado = st.selectbox("A√±o", a√±os_disponibles)

            

        fecha_seleccionada = datetime(a√±o_seleccionado, mes_seleccionado, d√≠a_seleccionado).date()
        st.write(f"üìå Fecha seleccionada: `{fecha_seleccionada}`")

        df_filtrado = data[(data['commodity'] == fruta_dict[fruta]) & 
                        (data['report_date'].dt.date == fecha_seleccionada)]

    if not df_filtrado.empty:
        st.success("üìä Datos encontrados:")

    # =============== üìÖ An√°lisis Estacional ===============
    st.markdown("---")
    st.subheader("üìÖ An√°lisis estacional")

    # Mapeo manual de meses en espa√±ol si locale falla
    month_translation = {
        'January': 'Enero', 'February': 'Febrero', 'March': 'Marzo',
        'April': 'Abril', 'May': 'Mayo', 'June': 'Junio',
        'July': 'Julio', 'August': 'Agosto', 'September': 'Septiembre',
        'October': 'Octubre', 'November': 'Noviembre', 'December': 'Diciembre'
    }

    # Solo si hay datos
    if not data.empty:
        data['month'] = data['report_date'].dt.month_name().map(month_translation)

        orden_meses = [
            'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
            'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
        ]

        # === üìä Promedio mensual ===
        monthly_avg = data.groupby('month')[['price']].mean().reindex(orden_meses)
        st.write("Promedio mensual de precios:")
        st.bar_chart(monthly_avg)

        # === üìà M√©tricas destacadas ===
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Precio m√°ximo hist√≥rico", f"${monthly_avg['price'].max():.2f}")
            st.metric("Mes con mayor precio", monthly_avg['price'].idxmax())
        with col2:
            st.metric("Precio m√≠nimo hist√≥rico", f"${monthly_avg['price'].min():.2f}")
            st.metric("Mes con menor precio", monthly_avg['price'].idxmin())

        # === üß† Interpretaci√≥n ===
        st.markdown("""
        ### Interpretaci√≥n:
        - Los meses con precios m√°s altos indican menor disponibilidad
        - Los precios bajos pueden coincidir con temporadas de cosecha
        - La diferencia muestra la volatilidad del mercado
        """)

        # =============== üå°Ô∏è Heatmap ===============
        if st.checkbox("Mostrar mapa de calor por meses y a√±os"):
            st.markdown("---")
            st.subheader("üå°Ô∏è Mapa de calor de precios")

            df_heatmap = data.copy()
            df_heatmap['year'] = df_heatmap['report_date'].dt.year
            df_heatmap['month'] = df_heatmap['report_date'].dt.month_name().map(month_translation)

            pivot_table = df_heatmap.pivot_table(
                values='high_price',
                index='month',
                columns='year',
                aggfunc='mean'
            ).reindex(orden_meses)

            st.dataframe(pivot_table.style.background_gradient(cmap='YlOrRd'))


# ========================
# === TAB 2 - Topolog√≠a
# ========================
with tab2:
    st.header("üî∫ An√°lisis Topol√≥gico de Series Temporales")

    # === Lectura seg√∫n fruta seleccionada ===
    fruta_nombre = fruta_dict[fruta]

    if fruta_nombre == "Blueberries":
        data_f = pd.read_csv("C:/Users/52452/Downloads/blueberry_prices.csv")
    else:
        data_f = pd.read_csv("C:/Users/52452/Downloads/blackberry_prices.csv")

    data_f['report_date'] = pd.to_datetime(data_f['report_date'])
    data_f = data_f.sort_values("report_date")
    serie = data_f["price"].values.reshape(-1, 1)

    st.subheader("üìâ Serie de Precios")
    st.line_chart(data_f.set_index("report_date")["price"])

    # Tabs internos para cada pipeline
    tab_te, tab_sw, tab_rips = st.tabs(["Takens Embedding", "Sliding Windows", "Rips Directo"])

    with tab_te:
        st.subheader("üîπ Takens Embedding")

        embedding_dimension = 5
        embedding_time_delay = 5
        stride = 2

        embedder = TakensEmbedding(time_delay=embedding_time_delay,
                                   dimension=embedding_dimension,
                                   stride=stride)
        batch_pca = CollectionTransformer(PCA(n_components=3), n_jobs=-1)
        persistence = VietorisRipsPersistence(homology_dimensions=[0, 1, 2], n_jobs=-1)
        scaling = Scaler()
        entropy = PersistenceEntropy(normalize=True, nan_fill_value=-10)

        steps_te = [
            ("embedder", embedder),
            ("pca", batch_pca),
            ("persistence", persistence),
            ("scaling", scaling),
            ("entropy", entropy)
        ]

        topological_transfomer_te = Pipeline(steps_te)
        resultado_te = topological_transfomer_te.fit_transform(serie)
        te_df = pd.DataFrame(resultado_te, columns=['Entrop√≠a_0', 'Entrop√≠a_1', 'Entrop√≠a_2'])
        st.line_chart(te_df)
        st.caption(f"""
        Evoluci√≥n de la entrop√≠a de persistencia por dimensi√≥n topol√≥gica (0=componentes, 1=bucles, 2=cavidades).
        Embedding: dim={embedding_dimension}, delay={embedding_time_delay}, stride={stride}
        """)

    with tab_sw:
        st.subheader("üî∏ Sliding Windows")

        window_size = 30
        stride = 10

        steps_sw = [
            ("window", CollectionTransformer(SlidingWindow(size=window_size, stride=stride))),
            ("pca", CollectionTransformer(PCA(n_components=3), n_jobs=-1)),
            ("persistence", VietorisRipsPersistence(homology_dimensions=[0, 1, 2], n_jobs=-1)),
            ("scaling", Scaler()),
            ("entropy", PersistenceEntropy(normalize=True, nan_fill_value=-10))
        ]

        topological_transformer_sw = Pipeline(steps_sw)
        resultado_sw = topological_transformer_sw.fit_transform(serie)
        sw_df = pd.DataFrame(resultado_sw, columns=['Entrop√≠a_0', 'Entrop√≠a_1', 'Entrop√≠a_2'])
        st.line_chart(sw_df)
        st.caption(f"""
        Evoluci√≥n temporal de caracter√≠sticas topol√≥gicas (ventana={window_size}, stride={stride}).
        Las fluctuaciones indican cambios en la estructura topol√≥gica subyacente.
        """)

    with tab_rips:
        st.subheader("üîª Diagrama de Persistencia - Rips directo")

        def calcular_persistencia(X, maxdim=2):
            X_2d = np.array(X).reshape(-1, 1)
            rips = VietorisRipsPersistence(homology_dimensions=range(maxdim + 1))
            return rips.fit_transform([X_2d])[0]

        homology_persistence_pipeline = Pipeline([
            ('persistencia', FunctionTransformer(
                calcular_persistencia,
                kw_args={'maxdim': 2}
            ))
        ])

        diagrams = homology_persistence_pipeline.fit_transform(serie)

        from gtda.plotting import plot_diagram
        fig, ax = plt.subplots(figsize=(10, 6))
        plot_diagram(diagrams, ax=ax)
        ax.set_title(f'Diagrama de Persistencia para {fruta}')
        ax.set_xlabel('Tiempo de nacimiento')
        ax.set_ylabel('Tiempo de muerte')
        ax.grid(True, linestyle='--', alpha=0.6)

        handles, labels = ax.get_legend_handles_labels()
        ax.legend(handles, ['Dimensi√≥n 0', 'Dimensi√≥n 1', 'Dimensi√≥n 2'],
                  title='Dimensi√≥n Homol√≥gica',
                  bbox_to_anchor=(1.05, 1), 
                  loc='upper left')

        st.pyplot(fig, bbox_inches='tight', use_container_width=True)
        st.caption("""
        Diagrama que muestra los ciclos topol√≥gicos (puntos) y su persistencia.
        Puntos lejos de la diagonal representan caracter√≠sticas topol√≥gicas persistentes.
        """)


# === Footer ===
st.markdown("---")
st.markdown("""
<div style="text-align: center; padding: 20px;">
    <p>¬© 2023 Intelica - An√°lisis de Datos Agr√≠colas</p>
    <p>Contacto: info@intelica.com | Tel: +123456789</p>
</div>
""", unsafe_allow_html=True)
