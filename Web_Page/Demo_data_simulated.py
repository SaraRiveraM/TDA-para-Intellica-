# === Libraries ===
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
from ripser import Rips
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import FunctionTransformer
import matplotlib.pyplot as plt
from persim import plot_diagrams
from plotly.subplots import make_subplots
import plotly.graph_objects as go
from sklearn.decomposition import PCA
from gtda.time_series import SlidingWindow
from gtda.diagrams import PersistenceEntropy, Scaler
from gtda.metaestimators import CollectionTransformer
from gtda.pipeline import Pipeline
from gtda.time_series import SlidingWindow
from gtda.time_series import TakensEmbedding
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, roc_auc_score, recall_score, f1_score, precision_score
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from ripser import Rips
from sklearn.preprocessing import FunctionTransformer
from gtda.homology import VietorisRipsPersistence
import seaborn as sns 
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
from tensorflow.keras.models import load_model
from scipy.signal import find_peaks


# === Initial configuration ===
st.set_page_config(
    layout="wide",
    page_title="Fruits: a Topological Analysis for Intelica"
)

# === Load Data ===
@st.cache_data
def load_data():
    return pd.read_csv("C:/Users/52452/Downloads/df_fruits.csv")

data = load_data()
data['report_date'] = pd.to_datetime(data['report_date'])

# === Sidebar ===
with st.sidebar:
    st.image("https://raw.githubusercontent.com/SaraRiveraM/TDA-para-Intellica-/main/Images/images.png")
    st.markdown("<h1 style='font-size: 20px;'>Elija la fruta a analizar:</h1>", unsafe_allow_html=True)
    fruta = st.radio("Seleccione una fruta:", ["zarzamora", "mora azul"])

fruta_dict = {
    "zarzamora": "Blackberries",
    "mora azul": "Blueberries"
}

# === Tabs ===
tab1, tab2 = st.tabs([
    f"üß™ An√°lisis exploratorio de los precios de la {fruta}",
    f"üß† An√°lisis topol√≥gico de {fruta}"
])

# ========================
# === TAB 1 - Exploraci√≥n
# ========================
with tab1:
    st.markdown(f"<h1 style='font-size: 40px;'>üí≤ An√°lisis Topol√≥gico: Relaci√≥n de los Cambios Abruptos de los Precios de la  {fruta} üíπ</h1>", unsafe_allow_html=True)
    st.markdown("---")
    st.subheader("üîç Consulta hist√≥rica de precios")

    data['day'] = data['report_date'].dt.day
    data['month'] = data['report_date'].dt.month
    data['year'] = data['report_date'].dt.year

    st.markdown("### üìÖ Seleccione una fecha:")
    col1, col2, col3 = st.columns(3)

    with col1:
        d√≠as_disponibles = sorted(data['day'].unique())
        d√≠a_seleccionado = st.selectbox("D√≠a", d√≠as_disponibles)

    with col2:
        meses_disponibles = sorted(
            data[data['day'] == d√≠a_seleccionado]['month'].unique()
        )
        mes_seleccionado = st.selectbox(
            "Mes",
            meses_disponibles,
            format_func=lambda x: datetime(1900, x, 1).strftime('%B')
        )

    with col3:
        a√±os_disponibles = sorted(
            data[(data['day'] == d√≠a_seleccionado) & (data['month'] == mes_seleccionado)]['year'].unique(),
            reverse=True
        )
        a√±o_seleccionado = st.selectbox("A√±o", a√±os_disponibles)

            

        fecha_seleccionada = datetime(a√±o_seleccionado, mes_seleccionado, d√≠a_seleccionado).date()
        st.write(f"üìå Fecha seleccionada: `{fecha_seleccionada}`")

        df_filtrado = data[(data['commodity'] == fruta_dict[fruta]) & 
                        (data['report_date'].dt.date == fecha_seleccionada)]

    if not df_filtrado.empty:
        st.success("üìä Datos encontrados:")
        
        
    # === Mostrar serie original ===
    st.subheader("üìâ Serie de Precios")
    st.line_chart(data.set_index("report_date")["price"])

    # =============== üìÖ An√°lisis Estacional ===============
    st.markdown("----")
    st.subheader("üìÖ An√°lisis estacional")

    # Mapeo manual de meses en espa√±ol si locale falla
    month_translation = {
        'January': 'Enero', 'February': 'Febrero', 'March': 'Marzo',
        'April': 'Abril', 'May': 'Mayo', 'June': 'Junio',
        'July': 'Julio', 'August': 'Agosto', 'September': 'Septiembre',
        'October': 'Octubre', 'November': 'Noviembre', 'December': 'Diciembre'
    }

    # Solo si hay datos
    if not data.empty:
        data['month'] = data['report_date'].dt.month_name().map(month_translation)

        orden_meses = [
            'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
            'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
        ]

        # === üìä Promedio mensual ===
        monthly_avg = data.groupby('month')[['price']].mean().reindex(orden_meses)
        st.write("Promedio mensual de precios:")
        st.bar_chart(monthly_avg)

        # === üìà M√©tricas destacadas ===
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Precio m√°ximo hist√≥rico", f"${monthly_avg['price'].max():.2f}")
            st.metric("Mes con mayor precio", monthly_avg['price'].idxmax())
        with col2:
            st.metric("Precio m√≠nimo hist√≥rico", f"${monthly_avg['price'].min():.2f}")
            st.metric("Mes con menor precio", monthly_avg['price'].idxmin())

        # === üß† Interpretaci√≥n ===
        st.markdown("""
        ### Interpretaci√≥n:
        - Los meses con precios m√°s altos indican menor disponibilidad
        - Los precios bajos pueden coincidir con temporadas de cosecha
        - La diferencia muestra la volatilidad del mercado
        """)

        # =============== üå°Ô∏è Heatmap ===============
        if st.checkbox("Mostrar mapa de calor por meses y a√±os"):
            st.markdown("---")
            st.subheader("üå°Ô∏è Mapa de calor de precios")

            df_heatmap = data.copy()
            df_heatmap['year'] = df_heatmap['report_date'].dt.year
            df_heatmap['month'] = df_heatmap['report_date'].dt.month_name().map(month_translation)

            pivot_table = df_heatmap.pivot_table(
                values='price',
                index='month',
                columns='year',
                aggfunc='mean'
            ).reindex(orden_meses)

            st.dataframe(pivot_table.style.background_gradient(cmap='YlOrRd'))


# ========================
# === TAB 2 - Topolog√≠a
# ========================
# Custom transformer for collection handling
class CollectionTransformer(BaseEstimator, TransformerMixin):
    def __init__(self, estimator, n_jobs=None):
        self.estimator = estimator
        self.n_jobs = n_jobs
        
    def fit(self, X, y=None):
        return self
    
    def transform(self, X):
        return np.array([self.estimator.fit_transform(x) for x in X])

# Funci√≥n TDA transformation
def tda_transformation(X, method='TE'): 
    if method == 'TE':
        embedding_dimension = 5
        embedding_time_delay = 5
        stride = 2
        embedder = TakensEmbedding(time_delay=embedding_time_delay,
                                dimension=embedding_dimension,
                                stride=stride)
        batch_pca = CollectionTransformer(PCA(n_components=3), n_jobs=-1)
        persistence = VietorisRipsPersistence(homology_dimensions=[0, 1, 2], n_jobs=-1)
        scaling = Scaler()
        entropy = PersistenceEntropy(normalize=True, nan_fill_value=-10)
        steps_te = [("embedder", embedder),
                ("pca", batch_pca),
                ("persistence", persistence),
                ("scaling", scaling),
                ("entropy", entropy)]
        topological_transformer_te = Pipeline(steps_te)
        return topological_transformer_te.fit_transform(X)
    if method == "SW": 
        # Par√°metros
        window_size = 30
        stride = 10
        # Pasos del pipeline
        steps_sw = [
            ("window", CollectionTransformer(SlidingWindow(size=window_size, stride=stride))),
            ("pca", CollectionTransformer(PCA(n_components=3), n_jobs=-1)),
            ("persistence", VietorisRipsPersistence(homology_dimensions=[0, 1, 2], n_jobs=-1)),
            ("scaling", Scaler()),
            ("entropy", PersistenceEntropy(normalize=True, nan_fill_value=-10))
        ]
        topological_transformer_sw = Pipeline(steps_sw)
        return topological_transformer_sw.fit_transform(X)

# Funci√≥n para plot persistent homology
def plot_persistent_homology(x, method="TE", embedding_dimension=5, embedding_time_delay=5, stride=2, homology_dimensions=[0, 1, 2], window_size=5):
    """
    Calcula y plotea el diagrama de persistencia (H0, H1, H2) de una serie de tiempo.
    Par√°metros:
    - x: np.array, serie de tiempo unidimensional.
    - embedding_dimension: dimensi√≥n del embedding de Takens.
    - embedding_time_delay: delay entre componentes del embedding.
    - stride: stride del embedding.
    - homology_dimensions: lista de dimensiones homol√≥gicas a calcular.
    """
    if method == "TE":
        # Takens embedding
        takens = SingleTakensEmbedding(time_delay=embedding_time_delay,
                                    dimension=embedding_dimension,
                                    stride=stride)
        X_embedded = takens.fit_transform(x)
        # Vietoris-Rips
        vr = VietorisRipsPersistence(homology_dimensions=homology_dimensions)
        X_embedded_batch = X_embedded[None, :, :]  # reshape para batch
        diagrams = vr.fit_transform(X_embedded_batch)
        # Plot
        fig = plot_diagram(diagrams[0])
        return fig
    if method == "SW": 
        # Sliding window embedding
        sliding = SlidingWindow(size=window_size, stride=stride)
        X_embedded = sliding.fit_transform(x)
        # Vietoris-Rips
        vr = VietorisRipsPersistence(homology_dimensions=homology_dimensions)
        X_embedded_batch = X_embedded[None, :, :]  # reshape para batch
        diagrams = vr.fit_transform(X_embedded_batch)
        # Plot
        fig = plot_diagram(diagrams[0])
        return fig

# Funci√≥n para preparar datos para CNN usando TDA
def prepare_cnn_data_with_tda(serie, method='SW'):
    """
    Prepara los datos de la serie temporal usando transformaci√≥n TDA para el modelo CNN
    """
    # Aplicar transformaci√≥n TDA
    X_tda = tda_transformation([serie.flatten()], method=method)
    return X_tda

# Funci√≥n para cargar y aplicar el modelo CNN
@st.cache_resource
def load_cnn_model():
    """
    Carga el modelo CNN desde el archivo .keras
    """
    try:
        from tensorflow.keras.models import load_model
        model = load_model("C:/Users/52452/Downloads/modelo_sw.keras")
        return model
    except Exception as e:
        st.error(f"Error al cargar el modelo: {e}")
        return None

# === Tab 2 - Topolog√≠a ===
with tab2:
    st.header("üî∫ An√°lisis Topol√≥gico de Series Temporales")
    
    # === Data Loading ===
    fruta_nombre = fruta_dict[fruta]
    if fruta_nombre == "Blueberries":
        data_f = pd.read_csv("C:/Users/52452/Downloads/blueberry_prices.csv")
    else:
        data_f = pd.read_csv("C:/Users/52452/Downloads/blackberry_prices.csv")
    
    data_f['report_date'] = pd.to_datetime(data_f['report_date'])
    data_f = data_f.sort_values("report_date")
    
    # Agregar columnas de a√±o y mes para filtrado
    data_f['year'] = data_f['report_date'].dt.year
    data_f['month'] = data_f['report_date'].dt.month
    data_f['year_month'] = data_f['report_date'].dt.to_period('M')
    
    st.subheader(f"üìä An√°lisis de precios de {fruta_nombre}")
    
    # === Selecci√≥n de per√≠odo ===
    col1, col2 = st.columns(2)
    
    with col1:
        # Seleccionar a√±o
        years_available = sorted(data_f['year'].unique())
        selected_year = st.selectbox("Selecciona el a√±o:", years_available)
    
    with col2:
        # Seleccionar mes
        months_dict = {
            1: "Enero", 2: "Febrero", 3: "Marzo", 4: "Abril",
            5: "Mayo", 6: "Junio", 7: "Julio", 8: "Agosto",
            9: "Septiembre", 10: "Octubre", 11: "Noviembre", 12: "Diciembre"
        }
        
        # Filtrar meses disponibles para el a√±o seleccionado
        months_available = sorted(data_f[data_f['year'] == selected_year]['month'].unique())
        month_options = {month: months_dict[month] for month in months_available}
        
        selected_month = st.selectbox("Selecciona el mes:", 
                                    options=list(month_options.keys()),
                                    format_func=lambda x: month_options[x])
    
    # === Filtrar datos seg√∫n selecci√≥n ===
    data_filtered = data_f[(data_f['year'] == selected_year) & (data_f['month'] == selected_month)]
    
    if len(data_filtered) == 0:
        st.warning("No hay datos disponibles para el per√≠odo seleccionado.")
    else:
        # Mostrar informaci√≥n del per√≠odo seleccionado
        st.info(f"üìÖ Per√≠odo seleccionado: {months_dict[selected_month]} {selected_year} "
                f"({len(data_filtered)} registros)")
        
        # Preparar serie temporal
        serie = data_filtered["price"].values.reshape(-1, 1)
        
        # === Visualizaci√≥n de la serie temporal ===
        st.subheader("üìà Serie Temporal del Per√≠odo Seleccionado")
        
        fig_serie = plt.figure(figsize=(12, 6))
        plt.plot(data_filtered['report_date'], data_filtered['price'], 
                marker='o', linewidth=2, markersize=4)
        plt.title(f'Precios de {fruta_nombre} - {months_dict[selected_month]} {selected_year}')
        plt.xlabel('Fecha')
        plt.ylabel('Precio ($)')
        plt.xticks(rotation=45)
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        st.pyplot(fig_serie)
        
        # === An√°lisis Topol√≥gico ===
        st.subheader("üî∫ An√°lisis de Persistencia Topol√≥gica")
        
        # Selecci√≥n del m√©todo TDA
        tda_method = st.selectbox("Selecciona el m√©todo TDA:", 
                                 options=['TE', 'SW'], 
                                 format_func=lambda x: 'Takens Embedding' if x == 'TE' else 'Sliding Window')
        
        if len(serie) >= 10:  # M√≠nimo de datos necesarios
            try:
                # Mostrar diagrama de persistencia
                st.subheader("üìä Diagrama de Persistencia")
                
                with st.spinner("Calculando diagrama de persistencia..."):
                    fig_persistence = plot_persistent_homology(serie.flatten(), method=tda_method)
                    st.plotly_chart(fig_persistence, use_container_width=True)
                
                # === An√°lisis con CNN usando TDA ===
                st.subheader("ü§ñ Predicci√≥n de Cambios Abruptos con CNN + TDA")
                
                # Cargar modelo CNN
                model = load_cnn_model()
                
                if model is not None:
                    with st.spinner("Aplicando transformaci√≥n TDA y prediciendo..."):
                        # Preparar datos para CNN usando TDA
                        X_tda = prepare_cnn_data_with_tda(serie, method=tda_method)
                        
                        # Verificar si tenemos datos v√°lidos
                        if X_tda is not None and len(X_tda) > 0:
                            # Normalizar datos TDA
                            from sklearn.preprocessing import MinMaxScaler
                            scaler = MinMaxScaler()
                            
                            # Reshape para normalizaci√≥n
                            X_tda_flat = X_tda.reshape(-1, 1)
                            X_tda_scaled = scaler.fit_transform(X_tda_flat)
                            
                            # Preparar para CNN - ajustar dimensiones seg√∫n tu modelo
                            # Asumiendo que el modelo espera secuencias, creamos ventanas de las caracter√≠sticas TDA
                            if len(X_tda_scaled) >= 3:  # M√≠nimo para crear una secuencia
                                X_cnn_input = X_tda_scaled.reshape(1, -1, 1)  # (samples, timesteps, features)
                                
                                try:
                                    # Realizar predicci√≥n
                                    prediction = model.predict(X_cnn_input)
                                    
                                    # Mostrar resultado principal
                                    prob_cambio = float(prediction[0][0]) if prediction.ndim > 1 else float(prediction[0])
                                    
                                    # M√©tricas principales
                                    col1, col2, col3 = st.columns(3)
                                    
                                    with col1:
                                        st.metric("üéØ Probabilidad de Cambio Abrupto", 
                                                f"{prob_cambio:.2%}")
                                    
                                    with col2:
                                        risk_level = "Alto" if prob_cambio > 0.7 else "Medio" if prob_cambio > 0.4 else "Bajo"
                                        color = "üî¥" if prob_cambio > 0.7 else "üü°" if prob_cambio > 0.4 else "üü¢"
                                        st.metric(f"{color} Nivel de Riesgo", risk_level)
                                    
                                    with col3:
                                        confidence = "Alta" if abs(prob_cambio - 0.5) > 0.3 else "Media" if abs(prob_cambio - 0.5) > 0.15 else "Baja"
                                        st.metric("üìä Confianza", confidence)
                                    
                                    # Visualizaci√≥n de caracter√≠sticas TDA
                                    st.subheader("üîç Caracter√≠sticas Topol√≥gicas Extra√≠das")
                                    
                                    fig_tda = plt.figure(figsize=(12, 6))
                                    
                                    # Plot de caracter√≠sticas TDA
                                    plt.subplot(2, 1, 1)
                                    plt.plot(X_tda_scaled.flatten(), 'b-', marker='o', linewidth=2, markersize=4)
                                    plt.title(f'Caracter√≠sticas TDA - M√©todo: {tda_method}')
                                    plt.ylabel('Valor Normalizado')
                                    plt.grid(True, alpha=0.3)
                                    
                                    # Plot de la serie original para comparaci√≥n
                                    plt.subplot(2, 1, 2)
                                    plt.plot(data_filtered['report_date'], data_filtered['price'], 
                                            'g-', marker='o', linewidth=2, markersize=4)
                                    plt.title(f'Serie Original - {fruta_nombre}')
                                    plt.xlabel('Fecha')
                                    plt.ylabel('Precio ($)')
                                    plt.xticks(rotation=45)
                                    plt.grid(True, alpha=0.3)
                                    
                                    plt.tight_layout()
                                    st.pyplot(fig_tda)
                                    
                                    # === Interpretaci√≥n de resultados ===
                                    st.subheader("üìã Interpretaci√≥n de Resultados")
                                    
                                    interpretacion = f"""
                                    **An√°lisis TDA para {fruta_nombre} en {months_dict[selected_month]} {selected_year}:**
                                    
                                    **M√©todo utilizado:** {tda_method} ({'Takens Embedding' if tda_method == 'TE' else 'Sliding Window'})
                                    
                                    **Caracter√≠sticas topol√≥gicas detectadas:**
                                    - N√∫mero de caracter√≠sticas extra√≠das: {len(X_tda_scaled)}
                                    - Rango de valores: [{X_tda_scaled.min():.3f}, {X_tda_scaled.max():.3f}]
                                    - Variabilidad topol√≥gica: {X_tda_scaled.std():.3f}
                                    
                                    **Predicci√≥n del modelo:**
                                    - Probabilidad de cambio abrupto: {prob_cambio:.2%}
                                    - Clasificaci√≥n de riesgo: {risk_level}
                                    """
                                    
                                    st.markdown(interpretacion)
                                    
                                    # Recomendaciones basadas en el resultado
                                    if prob_cambio > 0.7:
                                        st.error("""
                                        ‚ö†Ô∏è **ALERTA DE ALTO RIESGO**
                                        
                                        Las caracter√≠sticas topol√≥gicas indican una alta probabilidad de cambios abruptos en los precios:
                                        - Implementar estrategias de cobertura inmediatamente
                                        - Monitorear el mercado con mayor frecuencia
                                        - Considerar reducir posiciones de riesgo
                                        """)
                                    elif prob_cambio > 0.4:
                                        st.warning("""
                                        ‚ö° **PRECAUCI√ìN MODERADA**
                                        
                                        Se detecta volatilidad en las caracter√≠sticas topol√≥gicas:
                                        - Mantener vigilancia sobre las condiciones del mercado
                                        - Preparar estrategias de contingencia
                                        - Evaluar la diversificaci√≥n del portafolio
                                        """)
                                    else:
                                        st.success("""
                                        ‚úÖ **CONDICIONES ESTABLES**
                                        
                                        Las caracter√≠sticas topol√≥gicas sugieren estabilidad:
                                        - Ambiente favorable para operaciones regulares
                                        - Riesgo de volatilidad extrema relativamente bajo
                                        - Continuar con estrategias normales de trading
                                        """)
                                    
                                except Exception as e:
                                    st.error(f"Error en la predicci√≥n del modelo: {e}")
                                    st.info("Verifica que el modelo sea compatible con las caracter√≠sticas TDA extra√≠das.")
                            
                            else:
                                st.warning("Las caracter√≠sticas TDA extra√≠das son insuficientes para el modelo CNN.")
                        
                        else:
                            st.error("No se pudieron extraer caracter√≠sticas TDA de la serie temporal.")
                
                else:
                    st.error("No se pudo cargar el modelo CNN. Verifica que el archivo 'modelo_sw.keras' est√© en la ruta correcta.")
                    
            except Exception as e:
                st.error(f"Error en el an√°lisis topol√≥gico: {e}")
                st.info("Verifica que tengas instaladas todas las librer√≠as necesarias (giotto-tda, etc.)")
        
        else:
            st.warning("Se necesitan al menos 10 puntos de datos para el an√°lisis topol√≥gico.")
        
        # === Informaci√≥n adicional sobre TDA ===
        with st.expander("‚ÑπÔ∏è Informaci√≥n sobre An√°lisis Topol√≥gico de Datos (TDA)"):
            st.markdown("""
            **¬øQu√© es TDA?**
            
            El An√°lisis Topol√≥gico de Datos extrae caracter√≠sticas geom√©tricas y topol√≥gicas de los datos que son invariantes 
            a deformaciones continuas, capturando la "forma" subyacente de los datos.
            
            **M√©todos implementados:**
            
            - **Takens Embedding (TE)**: Reconstruye el espacio de estados de un sistema din√°mico a partir de la serie temporal
            - **Sliding Window (SW)**: Crea embeddings usando ventanas deslizantes de la serie temporal
            
            **Ventajas para an√°lisis financiero:**
            
            - Captura patrones no lineales complejos
            - Robusto ante ruido en los datos
            - Identifica cambios estructurales en la din√°mica del mercado
            - Proporciona caracter√≠sticas invariantes para clasificaci√≥n
            """)
        
        # === Comparaci√≥n de m√©todos ===
        if st.checkbox("üîÑ Comparar m√©todos TDA"):
            st.subheader("üìä Comparaci√≥n: Takens Embedding vs Sliding Window")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**Takens Embedding:**")
                try:
                    with st.spinner("Calculando TE..."):
                        X_te = prepare_cnn_data_with_tda(serie, method='TE')
                        if X_te is not None:
                            st.write(f"- Caracter√≠sticas extra√≠das: {len(X_te[0])}")
                            st.write(f"- Rango: [{X_te.min():.3f}, {X_te.max():.3f}]")
                except:
                    st.write("Error al calcular TE")
            
            with col2:
                st.write("**Sliding Window:**")
                try:
                    with st.spinner("Calculando SW..."):
                        X_sw = prepare_cnn_data_with_tda(serie, method='SW')
                        if X_sw is not None:
                            st.write(f"- Caracter√≠sticas extra√≠das: {len(X_sw[0])}")
                            st.write(f"- Rango: [{X_sw.min():.3f}, {X_sw.max():.3f}]")
                except:
                    st.write("Error al calcular SW")
                    
                    # Mostrar resultados
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        # Probabilidad promedio de cambio abrupto
                        avg_prob = np.mean(predictions)
                        st.metric("Probabilidad Promedio de Cambio Abrupto", 
                                f"{avg_prob:.2%}")
                    
                    with col2:
                        # M√°xima probabilidad
                        max_prob = np.max(predictions)
                        st.metric("M√°xima Probabilidad", f"{max_prob:.2%}")
                    
                    with col3:
                        # N√∫mero de alertas (probabilidad > 0.7)
                        alerts = np.sum(predictions > 0.7)
                        st.metric("Alertas de Alto Riesgo", f"{alerts}")
                    
                    # Gr√°fico de predicciones
                    st.subheader("üìä Evoluci√≥n de Predicciones de Cambios Abruptos")
                    
                    fig_pred = plt.figure(figsize=(12, 8))
                    
                    # Subplot 1: Precios originales
                    plt.subplot(2, 1, 1)
                    plt.plot(data_filtered['report_date'].iloc[window_size-1:], 
                            data_filtered['price'].iloc[window_size-1:], 
                            'b-', label='Precio Real', linewidth=2)
                    plt.title(f'Precios de {fruta_nombre}')
                    plt.ylabel('Precio ($)')
                    plt.legend()
                    plt.grid(True, alpha=0.3)
                    
                    # Subplot 2: Predicciones de cambios abruptos
                    plt.subplot(2, 1, 2)
                    dates_pred = data_filtered['report_date'].iloc[window_size-1:len(predictions)+window_size-1]
                    plt.plot(dates_pred, predictions, 'r-', label='Prob. Cambio Abrupto', linewidth=2)
                    plt.axhline(y=0.5, color='orange', linestyle='--', label='Umbral Medio (50%)')
                    plt.axhline(y=0.7, color='red', linestyle='--', label='Umbral Alto (70%)')
                    plt.fill_between(dates_pred, predictions.flatten(), alpha=0.3, color='red')
                    plt.title('Predicciones de Cambios Abruptos')
                    plt.xlabel('Fecha')
                    plt.ylabel('Probabilidad')
                    plt.legend()
                    plt.grid(True, alpha=0.3)
                    
                    plt.tight_layout()
                    st.pyplot(fig_pred)
                    
                    # === An√°lisis detallado ===
                    st.subheader("üìã An√°lisis Detallado")
                    
                    # Crear DataFrame con resultados
                    results_df = pd.DataFrame({
                        'Fecha': dates_pred,
                        'Precio': data_filtered['price'].iloc[window_size-1:len(predictions)+window_size-1].values,
                        'Probabilidad_Cambio': predictions.flatten(),
                        'Nivel_Riesgo': pd.cut(predictions.flatten(), 
                                             bins=[0, 0.3, 0.7, 1.0], 
                                             labels=['Bajo', 'Medio', 'Alto'])
                    })
                    
                    # Mostrar tabla con resultados
                    st.dataframe(results_df.style.format({
                        'Precio': '${:.2f}',
                        'Probabilidad_Cambio': '{:.2%}'
                    }))
                    
                    # === Resumen ejecutivo ===
                    st.subheader("üìà Resumen Ejecutivo")
                    
                    high_risk_days = len(results_df[results_df['Nivel_Riesgo'] == 'Alto'])
                    medium_risk_days = len(results_df[results_df['Nivel_Riesgo'] == 'Medio'])
                    low_risk_days = len(results_df[results_df['Nivel_Riesgo'] == 'Bajo'])
                    
                    st.markdown(f"""
                    **An√°lisis para {fruta_nombre} en {months_dict[selected_month]} {selected_year}:**
                    
                    - üî¥ **D√≠as de Alto Riesgo:** {high_risk_days} ({high_risk_days/len(results_df)*100:.1f}%)
                    - üü° **D√≠as de Riesgo Medio:** {medium_risk_days} ({medium_risk_days/len(results_df)*100:.1f}%)
                    - üü¢ **D√≠as de Bajo Riesgo:** {low_risk_days} ({low_risk_days/len(results_df)*100:.1f}%)
                    
                    **Recomendaciones:**
                    """)
                    
                    if avg_prob > 0.7:
                        st.error("‚ö†Ô∏è **ALTO RIESGO:** Se detecta alta probabilidad de cambios abruptos. Se recomienda monitoreo constante y estrategias de cobertura.")
                    elif avg_prob > 0.4:
                        st.warning("‚ö° **RIESGO MODERADO:** Volatilidad detectada. Se sugiere precauci√≥n en las operaciones.")
                    else:
                        st.success("‚úÖ **BAJO RIESGO:** Per√≠odo relativamente estable para operaciones.")
                    
                except Exception as e:
                    st.error(f"Error al realizar predicciones: {e}")
                    st.info("Verifica que el modelo sea compatible con las dimensiones de los datos.")
            
                else:
                    st.warning(f"No hay suficientes datos para el an√°lisis. Se necesitan al menos {window_size} puntos de datos.")
        
        else:
            st.error("No se pudo cargar el modelo CNN. Verifica que el archivo 'modelo_sw.keras' est√© en la ruta correcta.")
            
        # === An√°lisis Topol√≥gico Adicional (opcional) ===
        if st.checkbox("Mostrar An√°lisis Topol√≥gico Detallado"):
            st.subheader("üî∫ An√°lisis de Persistencia Topol√≥gica")
            
            try:
                # Aqu√≠ puedes agregar an√°lisis topol√≥gico usando gudhi o giotto-tda
                # Por ejemplo, diagramas de persistencia
                st.info("An√°lisis topol√≥gico en desarrollo. Implementar con bibliotecas como gudhi o giotto-tda.")
                
                # Ejemplo b√°sico de an√°lisis de forma
                from scipy.signal import find_peaks
                
                # Encontrar picos y valles
                peaks, _ = find_peaks(serie.flatten(), height=np.mean(serie))
                valleys, _ = find_peaks(-serie.flatten(), height=-np.mean(serie))
                
                st.write(f"üìä **Caracter√≠sticas topol√≥gicas b√°sicas:**")
                st.write(f"- N√∫mero de picos detectados: {len(peaks)}")
                st.write(f"- N√∫mero de valles detectados: {len(valleys)}")
                st.write(f"- Volatilidad (desviaci√≥n est√°ndar): ${np.std(serie):.2f}")
                
            except Exception as e:
                st.warning(f"Error en an√°lisis topol√≥gico: {e}")
    
    
# === Footer ===
st.markdown("---")
st.markdown("""
<div style="text-align: center; padding: 20px;">
    <p>¬© 2023 Intelica - An√°lisis de Datos Agr√≠colas</p>
    <p>Contacto: info@intelica.com | Tel: +123456789</p>
</div>
""", unsafe_allow_html=True)
